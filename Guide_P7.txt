Node -v : v14.16.0
Npm -v : 6.14.11
ide : vs-code
versioning : github

DB:
Workbench 8.0
mysql
Utility:
postman 

add-on :
nodemon (utility)

npm install :
expresse (framework)
jwt
body-parser ( remplacer par modules interne a express )
bcrypte



Start P7
- créer un repo	  : 	https://github.com/matthieu661/P7_Matthieu_Boistard
- cloner le repos : ---> git clone https://github.com/matthieu661/P7_Matthieu_Boistard	

API REST create : basique

- initialiser npm : ---> npm init
- installation des dependances : 
	- express : npm install express --save
	- nodemon : npm install -g nodemon
- Création des fichiers basiques :
	- server.js 
	- app.js

- SQL installation de sequelize : ---> npm install -g sequelize-cli	
	- sequelize init
	
	**création des models(class) :
	
	/powershell/cd repo
	
	model User :
	--> sequelize model:create --attributes "email:string username:string mdp:string isAdmin:boolean BIO:string" --name User
	model Post
	--> sequelize model:create --attributes "idUSERS:integer title:string content:string attachement:string likes:integer" --name Post
	
	(creation automatique via sequelize-cli des fichier migration et models)
	
	**Completion des model dans vs-code :
	
	./models/user.js ./models.post.js (
	
	./migrations/...create-user.js ./migrations/ ...create-post.js
	
	(sequelize-cli ne crée que le squelette basqiue, les options sont à rajouter dans les fichiers models.)
	(Pour associer les tables, User(parent) --> Post(child)
			- definire avec associate dans model :
				models.User.hasMany(models.Post) (parent)
				models.Post.belongTo(models.User... (child)
			- definir le references dans migration pour le child :
				references : { model: 'parent', key: 'id' }
				
	
-SQL creation des bases de données
	- (dans mon cas) :
		cmd --> set PATH=%PATH%;C:\Program Files\MySQL\MySQL Server 8.0\bin
			--> mysql -u root -
				>Antilops123
			--> create database P7_dev
			--> create database P7_test
			--> create database P7_production
			
	- test sous workbench, les bases de données doivent etre vibles dans le local.
			( un schema est dispo pour visualiser les tables et les associations )
	
- creation de la structure du Projet : 
	- dossier : controllers / routes / middlewares
	-  fichier : userControler.js / user-routes.js 

	server.js --> app.js --> [routes] --> [controllers] --> [Account] 
	

- creation du cablage des routes :
	
	app.js --> user-routes.js :
		" const userRoutes = require('./routes/user-routes'); "
			user-routes.js --> userControler.js
				" const userCtrl = require("../controllers/Account/userRegister"); "
				" const userCtrl = require("../controllers/Account/userLogin); "
				
- creation logique pour user 

	./Account/userRegister.js : 
	
	- function register : test postman : OK / test mysql : SELECT * FROM Users = OK
			doit : 
			convenir au model,
			utiliser bcrypt pour le mdp,
			avoir un email unique,
			par default isAdmin = 0
			
	./Account/userLogin.js : 
	
	- function login : test postman : OK 
			doit : 
			recuperer email et le comparer dans la db
			generer un token jwt 
	
		-creation d'un middleware jsonwebtoken ( ./utils/jwt.utils.js )
			mémo : openclassroomP7 -->sha256 = 5d247c460793437146f7fd297d358e0ff78d06ef1bb5e52952dd19303560ae6b
			
			- connecttion jwt.utils.js ---> userLogin.js   
					" const jwtUtils = require('../../utils/jwt.utils') "
			
			
		
	------> commit " base de donnée crée et connecté, structure du projet créé, mise en place des routes pour user "		
	
	
			- modification de la function Register :
				- elle ne dois pas accepter de username similaire 
				
			- Validation des données Regex et min.length sur les routes Users
				- email : regex
				- username : length.min length.max
				- mdp : regex 
	Alerte --->	- bio : si remplis length.min length.max (ne fonctionne pas peut etre a cause du AllowedNull : true ou du type text dans bdd)
				
	Alerte ---> - probleme pour exporter les regex ( a revoir si temps OK )			
				
			- Ajout de la verification des par token pour les routes // ( à refactoriser et a importer dans le fichier routter si temps OK )
			
					- création d'un [utils] pour l'authentification JWT
							-->jwt.utils.js
					
			- création des routes users ajout d'un dossier onAccount :
			
					- .Account/onAncount/.getAllUser.js GET ALL 
					Postman OK
					- .Account/onAncount/.getOneUser.js GET ONE
					Postman OK
					- .Account/onAncount/.modifyUser.js PUT 
					Postman OK
					- .Account/onAncount/.deleteUser.js DELETE 
					Postman OK
					
	-------> commot " route User, logique User avec validation des données et authentification "  
	
	Alerte ---> - tentative d'exporte de la fonction de recuperation d'id ( probleme de scope ) ...
			
	Alerte ---> - mauvais manip.. oublié de ctrlS ... reparation du jwt.utils.js  OK		
			
			- cration des fichiers :
					
					./controllers/Post/..
					
						-createPost.js
						-deletePost.js
						-getAllPost.js
						-getOnePost.js
						-modifyPost.js
						
			- creation du routage vers les controllers.

				app.js ok --> routes-post --> ./controller/Post/...
				
			- création de la logique :
			
						-createPost.js : OK
							Postman :OK
						-getAllPost.js : OK
							Postman : OK 
							
	
		------> commit " Reparation + structure Post + logique createPost "	
		
			- modification logique getAllPost.js : ajout d'un tri par date de création . 
			
			- création de la logique :
			
						-getOnePost.js : OK
							Postman : OK
						-modifyPost.js : OK
							Postman : OK
						-deletePost.js : OK
							Postman : OK
							
		------> commit " Logique route Post basique "	
						